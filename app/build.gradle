apply plugin: 'com.android.application'
apply plugin: 'checkstyle'

dependencies {
  compile 'com.android.support:support-v4:21.0.2'
  compile 'com.android.support:appcompat-v7:21.0.2'
  compile 'com.fasterxml.jackson.core:jackson-core:2.4.1'
  compile  'com.fasterxml.jackson.core:jackson-annotations:2.4.1'
  compile 'com.fasterxml.jackson.core:jackson-databind:2.4.1.1'
  compile project(':libraries:android-support-v4-preferencefragment')
  compile fileTree(dir: 'libs', include: ['*.jar'])
  androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.2.1'
  androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.2.1:javadoc'
}

android {
  compileSdkVersion 21
  buildToolsVersion "21.1.2"
  
  productFlavors {
    sbf_binnen {
      applicationId "de.dev.eth0.fuehrerschein.sbf_binnen"
      versionName "SBF-Binnen 1.5"
    }
    sbf_see {
      applicationId "de.dev.eth0.fuehrerschein.sbf_see"
      versionName "SBF-See 1.2"
    }
    sprechfunk {
      applicationId "de.dev.eth0.fuehrerschein.sprechfunk"
      versionName "Sprechfunk 0.5"
    }
  }

  defaultConfig {
    minSdkVersion 10
    targetSdkVersion 21
    versionCode 7
    testInstrumentationRunner "android.test.InstrumentationTestRunner"
  }
  // remove license.txt from dependencies
  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
  }
  sourceSets {
    test {
      java.srcDirs = ['src/androidTest/java']
    }
    androidTest.setRoot('src/androidTest')
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  signingConfigs {
    releaseSigning {
      storeFile file("../../misc/android-release-key.keystore")
      storePassword ""
      keyAlias "android-release-key"
      keyPassword ""

    }
  }

  buildTypes {
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
      //signingConfig signingConfigs.releaseSigning
    }
    debug  {
      applicationIdSuffix ".debug"
      versionNameSuffix "-DEBUG"
    }
  }
}

checkstyle {
  configFile = new File(rootDir, "config/checkstyle.xml")
  showViolations true
  ignoreFailures = true
}


android.applicationVariants.all { variant ->
  def name = variant.buildType.name
  name = name + "" +variant.productFlavors.name

  def checkstyle = project.tasks.create "checkstyle${name.capitalize()}", Checkstyle
  checkstyle.dependsOn variant.javaCompile
  checkstyle.source variant.javaCompile.source
  checkstyle.classpath = project.fileTree(variant.javaCompile.destinationDir)
  checkstyle.exclude('**/BuildConfig.java')
  checkstyle.exclude('**/R.java')
  checkstyle.exclude('**/de/schildbach/**')
  checkstyle.ignoreFailures(true)
  project.tasks.getByName("check").dependsOn checkstyle
}

gradle.taskGraph.whenReady { taskGraph ->
  if(taskGraph.hasTask(':app:assembleRelease') && project(":app").android.buildTypes.release.signingConfig != null) {
    def pass = System.console().readPassword("\nPlease enter key passphrase: ")
    pwd = new String(pass)
    project(":app").android.signingConfigs.releaseSigning.storePassword = pwd
    project(":app").android.signingConfigs.releaseSigning.keyPassword = pwd
  }
}

